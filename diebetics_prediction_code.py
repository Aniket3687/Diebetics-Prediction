# -*- coding: utf-8 -*-
"""Diebetics_prediction_code.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qPr-UtL-7iRXp5lcqq4lGsxQPSX9uZzw
"""

# Import all the necessary libraries
import pandas as pd  # Import pandas which is used for data analysis
import seaborn as sns  # Import seaborn which is used for data visualization
import matplotlib.pyplot as plt  # Import matplotlib which is used for plotting the graphs and data visualization
import numpy as np  # Import numpy which is used for numerical computation
from sklearn.preprocessing import StandardScaler
from sklearn.preprocessing import Normalizer
from sklearn.preprocessing  import OneHotEncoder  # Import OneHotEncoder to find out one hot encodding
from sklearn.feature_extraction.text import TfidfVectorizer  # Import TfidfVectorizer to find out TFIDF values
from scipy.sparse import hstack  # To combine all the features horizontally
from sklearn.cluster import KMeans  # For kmeans clustering
from sklearn import metrics
from scipy.spatial.distance import cdist
import warnings
warnings.filterwarnings('ignore')

df = pd.read_csv("/content/diabetes_data.csv", engine = 'python')  # Read data

df["Outcome"].replace({0: "Normal", 1: "Diabetic"}, inplace = True)

df.head()

X = df.drop(["Pregnancies", "Outcome"], axis = 1)
y = df["Outcome"]
X.head()

df.info()

"""# Exploratory data analysis"""

plt.figure(figsize = (12, 8))
sns.scatterplot(x = 'Glucose', y = 'BloodPressure', data = df)
plt.xticks(rotation = 90)

plt.figure(figsize = (12, 8))
sns.scatterplot(x = 'Glucose', y = 'SkinThickness', data = df)
plt.xticks(rotation = 90)

plt.figure(figsize = (12, 8))
sns.scatterplot(x = 'Glucose', y = 'Insulin', data = df)
plt.xticks(rotation = 90)

plt.figure(figsize = (12, 8))
sns.scatterplot(x = 'Glucose', y = 'BMI', data = df)
plt.xticks(rotation = 90)

plt.figure(figsize = (12, 8))
sns.scatterplot(x = 'Glucose', y = 'DiabetesPedigreeFunction', data = df)
plt.xticks(rotation = 90)

plt.figure(figsize = (12, 8))
sns.scatterplot(x = 'Glucose', y = 'Age', data = df)
plt.xticks(rotation = 90)

col_name = X.columns  # Get columns names of the dataframe
col_name

"""# Data normalization"""

for i in col_name:
    # Normalize the feature 'customerid'
    norm = Normalizer()
    norm.fit(X[i].values.reshape(-1, 1))
    X[i] = norm.transform(X[i].values.reshape(-1, 1))

X.head()

"""# Split data into train and test sets"""

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.33, random_state = 42)

"""# Training K-NN model"""

from sklearn.neighbors import KNeighborsClassifier
neigh = KNeighborsClassifier(n_neighbors = 3)
neigh.fit(X_train, y_train)

pred = neigh.predict(X_test)

pred

from sklearn.metrics import accuracy_score
accuracy = accuracy_score(y_test, pred)

print("Accuracy of the K-NN model is: ", accuracy)

prediction = neigh.predict([[148, 72, 35, 0, 33.6, 0.627, 50]])

print(prediction)

